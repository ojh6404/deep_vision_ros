#!/usr/bin/env python3
import argparse
import os
import re
import shutil
import subprocess
from pathlib import Path
from tempfile import TemporaryDirectory
from typing import Optional

_DEEP_VISION_ROS_ROOT_INSIDE_CONTAINER = "/home/user/catkin_ws/src/deep_vision_ros"
_TORCH_CACHE_DIR_INSIDE_CONTAINER = "/home/user/.cache/torch"
_TORCH_CACHE_DIR = os.getenv("TORCH_HOME", Path.home() / ".cache" / "torch")
_HF_CACHE_DIR_INSIDE_CONTAINER = "/home/user/.cache/huggingface"
_HF_CACHE_DIR = os.getenv("HF_HOME", Path.home() / ".cache" / "huggingface")
_VISION_ANYTHING_CACHE_DIR = os.path.expanduser("~/.cache/vision_anything")
_VISION_ANYTHING_CACHE_DIR_INSIDE_CONTAINER = "/home/user/.cache/vision_anything"

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-launch", type=str, help="launch file name")
    parser.add_argument(
        "-host", type=str, default="pr1040", help="host name or ip-address"
    )
    parser.add_argument(
        "-cache", default=False, action="store_true", help="mount cache directory or not"
    )
    parser.add_argument(
        "launch_args",
        nargs=argparse.REMAINDER,
        help="launch args in ros style e.g. foo:=var",
    )
    args = parser.parse_args()

    mount_path_str: Optional[str] = Path(__file__).resolve().parent / "launch"
    assert mount_path_str is not None
    mount_path = Path(mount_path_str)

    launch_file_name: Optional[str] = args.launch
    assert launch_file_name is not None

    for launch_arg in args.launch_args:
        assert bool(re.match(r".*:=.*", launch_arg))
    launch_args = " ".join(args.launch_args)

    use_gpu = True  # default
    for launch_arg in args.launch_args:
        if "device:=" not in launch_arg:
            continue
        device = launch_arg.split(":=")[1]
        if device == "cpu":
            use_gpu = False

    with TemporaryDirectory() as td:
        tmp_launch_path = Path(td) / "launch"
        if mount_path.is_dir():
            shutil.copytree(mount_path, tmp_launch_path)
        else:
            shutil.copyfile(mount_path, tmp_launch_path)

        cache_option = """-v {torch_cache_dir}:{torch_cache_dir_inside_container} \
            -v {hf_cache_dir}:{hf_cache_dir_inside_container} \
            -v {vision_anything_cache_dir}:{vision_anything_cache_dir_inside_container} \
        """.format(
            torch_cache_dir=_TORCH_CACHE_DIR,
            torch_cache_dir_inside_container=_TORCH_CACHE_DIR_INSIDE_CONTAINER,
            hf_cache_dir=_HF_CACHE_DIR,
            hf_cache_dir_inside_container=_HF_CACHE_DIR_INSIDE_CONTAINER,
            vision_anything_cache_dir=_VISION_ANYTHING_CACHE_DIR,
            vision_anything_cache_dir_inside_container=_VISION_ANYTHING_CACHE_DIR_INSIDE_CONTAINER,
        ) if args.cache else ""
        docker_run_command = """
            docker run \
                -v {node_scripts_dir}:{deep_vision_ros_root}/node_scripts \
                -v {tmp_launch_path}:{deep_vision_ros_root}/launch \
                {cache_option} \
                --rm --net=host -it \
                {gpu_arg} \
                deep_vision_ros:latest \
                /bin/bash -i -c \
                "source ~/.bashrc; \
                roscd deep_vision_ros; \
                rossetip; rossetmaster {host}; \
                roslaunch deep_vision_ros {launch_file_name} {launch_args}"
                """.format(
            node_scripts_dir=Path(__file__).resolve().parent / "node_scripts",
            tmp_launch_path=tmp_launch_path,
            deep_vision_ros_root=_DEEP_VISION_ROS_ROOT_INSIDE_CONTAINER,
            cache_option=cache_option,
            gpu_arg="--gpus 1" if use_gpu else "",
            host=args.host,
            launch_file_name=launch_file_name,
            launch_args=launch_args,
        )
        subprocess.call(docker_run_command, shell=True)
